{{- if .Values.features.embedded_database.enabled -}}

apiVersion: batch/v1
kind: Job
metadata:
  name: db-seeder
spec:
  template:
    spec:
      containers:
      - name: seeder
        image: {{ (index .Values "percona-xtradb-cluster").image.repository }}:{{ (index .Values "percona-xtradb-cluster").image.tag }}
        env:
        - name: DATABASE_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-pxc
              key: mysql-root-password
        - name: DATABASE_HOST
          value: {{ .Release.Name }}-pxc
        - name: NAMESPACE
          value: {{ .Release.Namespace }}
        volumeMounts:
        - name: cloud-controller-database-password
          mountPath: "/passwords/cloud_controller"
          readOnly: true
        - name: diego-database-password
          mountPath: "/passwords/diego"
          readOnly: true
        - name: network-connectivity-database-password
          mountPath: "/passwords/network_connectivity"
          readOnly: true
        - name: network-policy-database-password
          mountPath: "/passwords/network_policy"
          readOnly: true
        - name: routing-api-database-password
          mountPath: "/passwords/routing-api"
          readOnly: true
        - name: uaa-database-password
          mountPath: "/passwords/uaa"
          readOnly: true
        - name: locket-database-password
          mountPath: "/passwords/locket"
          readOnly: true
        - name: credhub-database-password
          mountPath: "/passwords/credhub"
          readOnly: true
        command:
        - "/bin/bash"
        - "-ce"
        - |
          echo "Starting seeding..."
          databases=(
            "cloud_controller"
            "diego"
            "network_connectivity"
            "network_policy"
            "routing-api"
            "uaa"
            "locket"
            "credhub"
          )

          until echo "SELECT 'Ready!'" | mysql --host="${DATABASE_HOST}.${NAMESPACE}.svc" --user=root --password="${DATABASE_ROOT_PASSWORD}"; do
            echo "database not ready.."
            sleep 1
          done


          mysql --host="${DATABASE_HOST}.${NAMESPACE}.svc" --user=root --password="${DATABASE_ROOT_PASSWORD}" \
          < <(
            for database in ${databases[*]}; do
              password=$(</passwords/${database}/password)

              echo "CREATE USER \`${database}\` IDENTIFIED BY '${password}';"
              echo "CREATE DATABASE IF NOT EXISTS \`${database}\`;"
              echo "GRANT ALL ON \`${database}\`.* TO '${database}'@'%';"
            done
          )
          echo "done."

      volumes:
      - name: cloud-controller-database-password
        secret:
          secretName: {{ .Release.Namespace }}.var-cc-database-password
      - name: diego-database-password
        secret:
          secretName: {{ .Release.Namespace }}.var-diego-database-password
      - name: network-connectivity-database-password
        secret:
          secretName: {{ .Release.Namespace }}.var-network-connectivity-database-password
      - name: network-policy-database-password
        secret:
          secretName: {{ .Release.Namespace }}.var-network-policy-database-password
      - name: routing-api-database-password
        secret:
          secretName: {{ .Release.Namespace }}.var-routing-api-database-password
      - name: uaa-database-password
        secret:
          secretName: {{ .Release.Namespace }}.var-uaa-database-password
      - name: locket-database-password
        secret:
          secretName: {{ .Release.Namespace }}.var-locket-database-password
      - name: credhub-database-password
        secret:
          secretName: {{ .Release.Namespace }}.var-credhub-database-password
      restartPolicy: Never

{{- end -}}
